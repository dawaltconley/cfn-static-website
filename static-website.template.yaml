AWSTemplateFormatVersion: 2010-09-09
Description: A template for launching static sites on AWS.

Parameters:
  Domain:
    Type: String
    Description: Base domain name for the static website.
  Subdomain:
    Type: String
    Description: Primary subdomain to associate with the website.
    Default: www
  RedirectApexToSubdomain:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  TrailingSlash:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  IndexDocument:
    Type: String
    Default: 'index.html'
  UrlRedirectsStackName:
    Type: String
    Description: >-
      Name of the stack exporting basic URL redirect functions:
      install from https://github.com/dawaltconley/cloudfront-redirects
    Default: 'UrlRedirects'
  CloudFrontPriceClass:
    Type: String
    Description: Price class for CloudFront distribution.
    Default: PriceClass_All
    AllowedValues:     # TODO: some way to map these?
      - PriceClass_100  # North America, Europe
      - PriceClass_200  # + Asia, Middle East, Africa
      - PriceClass_All  # + South America, Oceania
  CloudFrontSecurityPolicy:
    Type: String
    Description: The minimum security policy for the CloudFront distribution.
    Default: TLSv1.2_2021
    AllowedValues:
      - TLSv1.2_2021
      - TLSv1.2_2019
      - TLSv1.2_2018
      - TLSv1.1_2016
      - TLSv1_2016
      - TLSv1
  CloudFrontCachePolicy:
    Type: String
    Description: Managed CloudFront cache policy to use.
    Default: CachingOptimized
    AllowedValues:
      - CachingOptimized
      - CachingOptimizedForUncompressedObjects
      - CachingDisabled
  HostedZoneId:
    Type: String
    Default: ''
  ExistingCertificate:
    Type: String
    Description: Represents an existing certificate.
    Default: ''
  ExistingCertificateType:
    Type: String
    Description: >-
      Indicates whether to use the certificate from the AWS Certificate
      Manager or AWS Identity and Access Management.
    Default: AcmCertificateArn
    AllowedValues:
    - AcmCertificateArn
    - IamCertificateId
  # Customer:
  #   Type: String
  #   Description: The customer name, used for tagging.
  # Access:
  #   Type: String
  #   Description: Name of the access group, used for tagging.

Mappings:
  ManagedCachePolicies:
    CachingOptimized:
      Id: 658327ea-f89d-4fab-a63d-7e88639e58f6
    CachingOptimizedForUncompressedObjects:
      Id: b2884449-e4de-46a7-ac36-70bc7f1ddd6d
    CachingDisabled:
      Id: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad

Conditions:
  HasSubdomain: !Not [!Equals [!Ref Subdomain, '']]
  HasRedirectApexToSubDomain: !And
    - !Equals [!Ref RedirectApexToSubdomain, 'true']
    - !Condition HasSubdomain
  NeedsHostedZone: !Equals [!Ref HostedZoneId, '']
  NeedsCertificate: !Equals [!Ref ExistingCertificate, '']
  HasIamCertificate: !And
    - !Not [!Condition NeedsCertificate]
    - !Equals [!Ref ExistingCertificateType, IamCertificateId]

Resources:

  # ACM
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Condition: NeedsCertificate
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      DomainName: !Ref Domain
      SubjectAlternativeNames:
        - !Sub '*.${Domain}'
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref Domain
          HostedZoneId: !If [NeedsHostedZone, !Ref HostedZone, !Ref HostedZoneId]

  # Route53
  HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: NeedsHostedZone
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Name: !Sub '${Domain}.'
  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub '${Domain}.'
      RecordSets:
        - Name: !If [HasSubdomain, !Sub '${Subdomain}.${Domain}', !Ref Domain]
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2  # Magic CloudFront number
            DNSName: !GetAtt Distribution.DomainName
        - !If
          - HasRedirectApexToSubDomain
          - Name: !Ref Domain
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2  # Magic CloudFront number
              DNSName: !GetAtt Distribution.DomainName
          - !Ref AWS::NoValue

  # CloudFront
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !If [HasSubdomain, !Sub '${Subdomain}.${Domain}', !Ref Domain]
        Aliases:
          - !If [HasSubdomain, !Sub '${Subdomain}.${Domain}', !Ref Domain]
          - !If [HasRedirectApexToSubDomain, !Ref Domain, !Ref 'AWS::NoValue']
          # always include primary domain, optionally include base domain
          # TODO: support redirecting from a subdomain to apex?
        Origins:
          - DomainName: !GetAtt SiteBucket.DomainName
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub >-
                origin-access-identity/cloudfront/${OriginAccessIdentity}
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        PriceClass: !Ref CloudFrontPriceClass
        ViewerCertificate:
          AcmCertificateArn: !If
            - NeedsCertificate
            - !Ref Certificate
            - !If [HasIamCertificate, !Ref AWS::NoValue, !Ref ExistingCertificate]
          IamCertificateId: !If
            - HasIamCertificate
            - !Ref ExistingCertificate
            - !Ref AWS::NoValue
          MinimumProtocolVersion: !Ref CloudFrontSecurityPolicy
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          TargetOriginId: s3origin
          CachePolicyId: !FindInMap
            - ManagedCachePolicies
            - !Ref CloudFrontCachePolicy
            - Id
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt RedirectFunction.Outputs.FunctionArn
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !If [HasSubdomain, !Sub '${Subdomain}.${Domain}', !Ref Domain]
  RedirectFunction:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./cloudfront-redirects.template.yaml
      Parameters:
        Subdomain: !Ref Subdomain
        TrailingSlash: !Ref TrailingSlash
        IndexDocument: !Ref IndexDocument
        UrlRedirectsStackName: !Ref UrlRedirectsStackName

  # S3
  SiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If [HasSubdomain, !Sub '${Subdomain}.${Domain}', !Ref Domain]
  SiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub '${SiteBucket.Arn}/*'
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

Outputs:
  StackName:
    Value: !Ref AWS::StackName
  ApexDomain:
    Value: !Ref Domain
    Export:
      Name: !Sub '${AWS::StackName}-Domain'
  PrimarySubdomain:
    Value: !Ref Subdomain
    Export:
      Name: !Sub '${AWS::StackName}-Subdomain'
  FullDomain:
    Value: !If [HasSubdomain, !Sub '${Subdomain}.${Domain}', !Ref Domain]
    Export:
      Name: !Sub '${AWS::StackName}-FullDomain'
  SiteBucket:
    Value: !Ref SiteBucket
  SiteBucketArn:
    Value: !GetAtt SiteBucket.Arn
  DistributionDomainName:
    Value: !GetAtt Distribution.DomainName
  CertificateArn:
    Value: !If [NeedsCertificate, !Ref Certificate, !Ref ExistingCertificate]
    Export:
      Name: !Sub '${AWS::StackName}-CertificateArn'
  CertificateType:
    Value: !If [NeedsCertificate, AcmCertificateArn, !Ref ExistingCertificateType]
  HostedZoneId:
    Value: !If [NeedsHostedZone, !Ref HostedZone, !Ref HostedZoneId]
  NameServers:
    Condition: NeedsHostedZone
    Value: !Join [' ', !GetAtt HostedZone.NameServers]
