AWSTemplateFormatVersion: 2010-09-09
Description: |-
  A template for launching static sites on AWS.

  Includes cloudfront-redirects.template.yaml, which depends on https://github.com/dawaltconley/cloudfront-redirects

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W3002 # ignore warnings about dependency on the `package` command

Parameters:
  # Base
  Domain:
    Type: String
    Description: Base domain name for the static website.
  Subdomain:
    Type: String
    Description: Primary subdomain to associate with the website. Pass an empty string for apex domains.
    Default: www
  404Page:
    Type: String
    Description: S3 object path to a custom 404 page.
    Default: ''

  # CloudFront Redirects
  Redirect:
    Type: String
    Default: ApexToSubdomain
    AllowedValues:
      - ApexToSubdomain
      - SubdomainToApex
      - None
  TrailingSlash:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  IndexDocument:
    Type: String
    Default: 'index.html'
  UrlRedirectsStackName:
    Type: String
    Description: >-
      Name of the stack exporting basic URL redirect functions:
      install from https://github.com/dawaltconley/cloudfront-redirects
    Default: 'UrlRedirects'

  # Domain Config
  Route53Dns:
    Type: String
    Description: Whether this domain uses Route53 for its DNS
    Default: 'true'
    AllowedValues: ['true', 'false']
  CertificateArn:
    Type: String
    Description: Represents an existing certificate.
    Default: ''
  CertificateType:
    Type: String
    Description: >-
      Indicates whether to use the certificate from the AWS Certificate
      Manager or AWS Identity and Access Management.
    Default: AcmCertificateArn
    AllowedValues:
    - AcmCertificateArn
    - IamCertificateId

  # CloudFront config
  CloudFrontAliases:
    Type: CommaDelimitedList
    Description: >-
      A list of extra aliases for the CloudFront distribution.
      The Domain and Subdomain parameters included automatically.
      DNS records pointing them to the distribution must be handled separately.
    Default: ''
  CloudFrontPriceClass:
    Type: String
    Description: Price class for CloudFront distribution.
    Default: PriceClass_All
    AllowedValues:     # TODO: some way to map these?
      - PriceClass_100  # North America, Europe
      - PriceClass_200  # + Asia, Middle East, Africa
      - PriceClass_All  # + South America, Oceania
  CloudFrontSecurityPolicy:
    Type: String
    Description: The minimum security policy for the CloudFront distribution.
    Default: TLSv1.2_2021
    AllowedValues:
      - SSLv3
      - TLSv1.2_2021
      - TLSv1.2_2019
      - TLSv1.2_2018
      - TLSv1.1_2016
      - TLSv1_2016
      - TLSv1
  CloudFrontCachePolicy:
    Type: String
    Description: Default edge cache policy.
    Default: CachingOptimized
    AllowedValues:
      - CachingOptimized
      - CachingOptimizedForUncompressedObjects
      - CachingDisabled
  CloudFrontHtmlCachePolicy:
    Type: String
    Description: Edge cache policy for HTML files.
    Default: CachingOptimized
    AllowedValues:
      - CachingOptimized
      - CachingOptimizedForUncompressedObjects
      - CachingDisabled

Mappings:
  ManagedCachePolicies:
    CachingOptimized:
      Id: 658327ea-f89d-4fab-a63d-7e88639e58f6
    CachingOptimizedForUncompressedObjects:
      Id: b2884449-e4de-46a7-ac36-70bc7f1ddd6d
    CachingDisabled:
      Id: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad

Conditions:
  Has404Page: !Not [!Equals [!Ref 404Page, '']]
  HasSubdomain: !Not [!Equals [!Ref Subdomain, '']]
  HasRedirect: !And
    - !Condition HasSubdomain
    - !Not [!Equals [ !Ref Redirect, 'None']]
  HasRedirectSubdomainToApex: !And
    - !Condition HasSubdomain
    - !Equals [!Ref Redirect, 'SubdomainToApex']
  CreateRecordSetGroup: !Equals [!Ref Route53Dns, 'true']
  HasCertificate: !Not [!Equals [!Ref CertificateArn, '']]
  HasAcmCertificate: !And
    - !Condition HasCertificate
    - !Equals [!Ref CertificateType, AcmCertificateArn]
  HasIamCertificate: !Not [!Condition HasAcmCertificate]
  HasCloudfrontAliases: !Not [!Equals [!Join ['', !Ref CloudFrontAliases], '']]
  CreateHtmlCacheBehavior: !Not [!Equals [!Ref CloudFrontCachePolicy, !Ref CloudFrontHtmlCachePolicy]]

Resources:

  # Route53
  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: CreateRecordSetGroup
    Properties:
      HostedZoneName: !Sub '${Domain}.'
      RecordSets:
        - Name: !If [HasSubdomain, !Sub '${Subdomain}.${Domain}', !Ref Domain]
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2  # Magic CloudFront number
            DNSName: !GetAtt Distribution.DomainName
        - !If
          - HasRedirect
          - Name: !Ref Domain
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2  # Magic CloudFront number
              DNSName: !GetAtt Distribution.DomainName
          - !Ref AWS::NoValue

  # CloudFront
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !If [HasSubdomain, !Sub '${Subdomain}.${Domain}', !Ref Domain]
        Aliases: !Split
          - ','
          - !Join
            - ','
            - - !If [HasSubdomain, !Sub '${Subdomain}.${Domain}', !Ref Domain]
              - !If [HasRedirect, !Ref Domain, !Ref 'AWS::NoValue']
              - !If [HasCloudfrontAliases, !Join [',', !Ref CloudFrontAliases], !Ref 'AWS::NoValue']
        Origins:
          - DomainName: !GetAtt SiteBucket.DomainName
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub >-
                origin-access-identity/cloudfront/${OriginAccessIdentity}
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        PriceClass: !Ref CloudFrontPriceClass
        ViewerCertificate: !If
          - HasCertificate
          - AcmCertificateArn: !If [HasAcmCertificate, !Ref CertificateArn, !Ref AWS::NoValue]
            IamCertificateId: !If [HasIamCertificate, !Ref CertificateArn, !Ref AWS::NoValue]
            MinimumProtocolVersion: !Ref CloudFrontSecurityPolicy
            SslSupportMethod: sni-only
          - !Ref AWS::NoValue
        CustomErrorResponses: !If
          - Has404Page
          -
            - ErrorCode: 404
              ResponseCode: 404
              ResponsePagePath: !Ref 404Page
          - !Ref AWS::NoValue
        DefaultCacheBehavior:
          TargetOriginId: s3origin
          CachePolicyId: !If
            - CreateHtmlCacheBehavior
            - !FindInMap [ManagedCachePolicies, !Ref CloudFrontHtmlCachePolicy, Id]
            - !FindInMap [ManagedCachePolicies, !Ref CloudFrontCachePolicy, Id]
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt RedirectFunction.Outputs.FunctionArn
        CacheBehaviors: !If
          - CreateHtmlCacheBehavior
          - 
            - PathPattern: '*.html'
              CachePolicyId: !FindInMap
                - ManagedCachePolicies
                - !Ref CloudFrontHtmlCachePolicy
                - Id
              TargetOriginId: s3origin
              ViewerProtocolPolicy: redirect-to-https
              AllowedMethods: [GET, HEAD, OPTIONS]
              CachedMethods: [GET, HEAD, OPTIONS]
              Compress: true
              FunctionAssociations:
                - EventType: viewer-request
                  FunctionARN: !GetAtt RedirectFunction.Outputs.FunctionArn
            - PathPattern: '*.*'
              CachePolicyId: !FindInMap
                - ManagedCachePolicies
                - !Ref CloudFrontCachePolicy
                - Id
              TargetOriginId: s3origin
              ViewerProtocolPolicy: redirect-to-https
              AllowedMethods: [GET, HEAD, OPTIONS]
              CachedMethods: [GET, HEAD, OPTIONS]
              Compress: true
              FunctionAssociations:
                - EventType: viewer-request
                  FunctionARN: !GetAtt RedirectFunction.Outputs.FunctionArn
          - !Ref AWS::NoValue
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !If [HasSubdomain, !Sub '${Subdomain}.${Domain}', !Ref Domain]
  RedirectFunction:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./cloudfront-redirects.template.yaml
      Parameters:
        # If subdomain exists but redirects to apex, use ApexDomain function
        Subdomain: !If [HasRedirectSubdomainToApex, '', !Ref Subdomain]
        SubdomainRedirect: !If [HasRedirect, 'true', 'false']
        TrailingSlash: !Ref TrailingSlash
        IndexDocument: !Ref IndexDocument
        UrlRedirectsStackName: !Ref UrlRedirectsStackName

  # S3
  SiteBucket:
    Type: AWS::S3::Bucket
  SiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:ListBucket'
              - 's3:GetObject'
            Effect: Allow
            Resource:
              - !Sub '${SiteBucket.Arn}'
              - !Sub '${SiteBucket.Arn}/*'
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

Outputs:
  StackName:
    Value: !Ref AWS::StackName
  ApexDomain:
    Value: !Ref Domain
  PrimarySubdomain:
    Value: !Ref Subdomain
  FullDomain:
    Value: !If [HasSubdomain, !Sub '${Subdomain}.${Domain}', !Ref Domain]
  SiteBucket:
    Value: !Ref SiteBucket
  SiteBucketArn:
    Value: !GetAtt SiteBucket.Arn
  DistributionDomainName:
    Value: !GetAtt Distribution.DomainName
