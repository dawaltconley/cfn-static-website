AWSTemplateFormatVersion: 2010-09-09
Description: Controls URL cleaning and subdomain redirection.

Parameters:
  Subdomain:
    Type: String
    Default: 'www'
  TrailingSlash:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  IndexDocument:
    Type: String
    Default: 'index.html'
  UrlRedirectsStackName:
    Type: String
    Description: 'Name of the stack exporting basic URL redirect functions: install from https://github.com/dawaltconley/cloudfront-redirects'
    Default: 'UrlRedirects'

Conditions:
  IsApex: !Equals [!Ref Subdomain, '']
  IsWWW: !Equals [!Ref Subdomain, 'www']
  HasTrailingSlash: !Equals [!Ref TrailingSlash, 'true']
  UsesApexDomainCleanUrls: !And [!Condition IsApex, !Condition HasTrailingSlash]
  UsesApexDomainCleanUrlsNoSlash: !And [!Condition IsApex, !Not [!Condition HasTrailingSlash]]
  UsesWWWDomainCleanUrls: !And [!Condition IsWWW, !Condition HasTrailingSlash]
  UsesWWWDomainCleanUrlsNoSlash: !And [!Condition IsWWW, !Not [!Condition HasTrailingSlash]]
  NeedsCustomFunction: !And
    - !Equals [!Ref IndexDocument, index.html]
    - !Not [!Or [!Condition IsApex, !Condition IsWWW]]

Resources:
  RedirectFunction:
    Type: AWS::CloudFront::Function
    Condition: NeedsCustomFunction
    Properties:
      Name: !Sub '${AWS::StackName}-URLRedirects'
      AutoPublish: true
      FunctionConfig:
        Comment: !Sub 'URI redirection for ${AWS::StackName}'
        Runtime: cloudfront-js-1.0
      FunctionCode: !Sub
        - |- 
          var primarySubdomain = '${Subdomain}';
          var indexDocument = '${IndexDocument}';

          function redirect(uri) {
              return {
                  statusCode: 301,
                  statusDescription: 'Moved Permanently',
                  headers: { location: { value: uri } },
              };
          }

          function handler(event) {
              var request = event.request;
              var uri = request.uri;
              var host = request.headers.host.value;
              var subdomains = host.split('.');

              if (subdomains[subdomains.length - 3] !== primarySubdomain) {
                  var apex = subdomains.slice(-2).join('.');
                  uri = `https://${!primarySubdomain}.${!apex + uri}`;
              }

              if (uri.endsWith('/')) {
                ${UriTrailingSlash}
              }
              if (uri.endsWith('/' + indexDocument)) {
                ${UriIndexDocument}
              }
              if (!request.uri.includes('.')) {
                ${UriNoTrailingSlash}
              }

              return request;
          }
        - UriTrailingSlash: !If
            - HasTrailingSlash
            - |-
              request.uri += indexDocument;
              return request;
            - |-
              return redirect(uri.slice(0, -1));
          UriIndexDocument: !Sub
            - |-
              var newUri = uri.slice(0, -indexDocument.length${SliceMod});
              return redirect(newUri);
            - SliceMod: !If [ HasTrailingSlash, '', ' - 1' ]
          UriNoTrailingSlash: !If
            - HasTrailingSlash
            - |-
              return redirect(uri + '/');
            - |-
              request.uri += '/' + indexDocument;
              return request;

Outputs:
  FunctionArn:
    Description: Arn for the function handling subdomain and uri redirects.
    Value: !If
      - NeedsCustomFunction
      - !GetAtt RedirectFunction.FunctionMetadata.FunctionARN
      - !If
        - UsesApexDomainCleanUrls
        - Fn::ImportValue: !Sub '${UrlRedirectsStackName}-ApexDomainCleanUrls'
        - !If
          - UsesApexDomainCleanUrlsNoSlash
          - Fn::ImportValue: !Sub '${UrlRedirectsStackName}-ApexDomainCleanUrlsNoSlash'
          - !If
            - UsesWWWDomainCleanUrls
            - Fn::ImportValue: !Sub '${UrlRedirectsStackName}-WWWDomainCleanUrls'
            - !If
              - UsesWWWDomainCleanUrlsNoSlash
              - Fn::ImportValue: !Sub '${UrlRedirectsStackName}-WWWDomainCleanUrlsNoSlash'
              - !Ref AWS::NoValue
