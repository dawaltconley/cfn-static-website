AWSTemplateFormatVersion: 2010-09-09
Description: Controls URL cleaning and subdomain redirection.

Parameters:
  Domain:
    Type: String
  RedirectToSubdomain:
    Type: String
    Default: 'www'
  RedirectFromSubdomain:
    Type: String
    Default: ''
  TrailingSlash:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  IndexDocument:
    Type: String
    Default: 'index.html'

Conditions:
  IsApex: !Equals [!Ref RedirectToSubdomain, '']
  RedirectFromApex: !Equals [ !Ref RedirectFromSubdomain, '' ]
  HasSubdomainRedirect: !Not [!Equals [!Ref RedirectFromSubdomain, !Ref RedirectToSubdomain]]
  HasTrailingSlash: !Equals [!Ref TrailingSlash, 'true']
  NeedsCustomFunction: !And
    - !Condition HasSubdomainRedirect
    - !Not [!Equals [!Ref RedirectToSubdomain, 'www']]
    - !Not [!Equals [!Ref RedirectFromSubdomain, 'www']]

Resources:
  RedirectFunction:
    Type: AWS::CloudFront::Function
    Condition: NeedsCustomFunction
    Properties:
      Name: !Sub '${AWS::StackName}-URLRedirects'
      AutoPublish: true
      FunctionConfig:
        Comment: !Sub
          - URI redirection for ${FullDomain}
          - FullDomain: !If [ IsApex, !Ref Domain, !Sub '${RedirectToSubdomain}.${Domain}' ]
        Runtime: cloudfront-js-1.0
      FunctionCode: !Sub
        - |-
          var indexDocument = '${IndexDocument}';
          var domain = '${RedirectTo}'.toLowerCase();
          var redirectDomain = '${RedirectFrom}'.toLowerCase();

          function uriRedirect(uri) {
            return {
              statusCode: 302,
              statusDescription: 'Found',
              headers: { location: { value: 'https://' + domain + uri } },
            };
          }

          function handler(event) {
              var request = event.request;
              var uri = request.uri;
              ${SubdomainRedirect}
              if (uri.endsWith('/')) {
                ${UriTrailingSlash}
              }
              if (uri.endsWith('/' + indexDocument)) {
                ${UriIndexDocument}
              }
              if (!uri.includes('.')) {
                ${UriNoTrailingSlash}
              }
              return request;
          }
        - RedirectTo: !If [ IsApex, !Ref Domain, !Sub '${RedirectToSubdomain}.${Domain}' ]
          RedirectFrom: !If [ RedirectFromApex, !Ref Domain, !Sub '${RedirectFromSubdomain}.${Domain}' ]
          SubdomainRedirect: !If
            - HasSubdomainRedirect
            - |-
              if (request.headers.host.value.toLowerCase() === redirectDomain) {
                  return {
                      statusCode: 301,
                      statusDescription: 'Moved Permanently',
                      headers: {
                          location: {
                              value: `https://${domain + uri}`,
                          },
                      },
                  };
              }
            - ''
          UriTrailingSlash: !If
            - HasTrailingSlash
            - |-
              request.uri += indexDocument;
              return request;
            - |-
              return uriRedirect(uri.slice(0, -1));
          UriIndexDocument: !Sub
            - |-
              var newUri = uri.slice(0, -indexDocument.length${SliceMod});
              return uriRedirect(newUri);
            - SliceMod: !If [ HasTrailingSlash, '', ' - 1' ]
          UriNoTrailingSlash: !If
            - HasTrailingSlash
            - |-
              return uriRedirect(uri + '/');
            - |-
              request.uri += '/' + indexDocument;
              return request;

Outputs:
  FunctionArn:
    Description: Arn for the function handling subdomain and uri redirects.
    Value: !GetAtt RedirectFunction.FunctionMetadata.FunctionARN
