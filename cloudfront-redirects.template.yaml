AWSTemplateFormatVersion: 2010-09-09
Description: |-
  Controls URL cleaning and subdomain redirection.

  Depends on https://github.com/dawaltconley/cloudfront-redirects

Parameters:
  Subdomain:
    Type: String
    Default: 'www'
  SubdomainRedirect:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  TrailingSlash:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  IndexDocument:
    Type: String
    Default: 'index.html'
  UrlRedirectsStackName:
    Type: String
    Description: >-
      Name of the stack exporting basic URL redirect functions:
      install from https://github.com/dawaltconley/cloudfront-redirects
    Default: 'UrlRedirects'

Conditions:
  IsApex: !Equals [!Ref Subdomain, '']
  IsWWW: !Equals [!Ref Subdomain, 'www']
  HasSubdomainRedirect: !Equals [!Ref SubdomainRedirect, 'true']
  HasTrailingSlash: !Equals [!Ref TrailingSlash, 'true']
  HasDefaultIndex: !Equals [!Ref IndexDocument, 'index.html']
  UsesCleanUrls: !And
    - !Condition HasDefaultIndex
    - !Not [!Condition HasSubdomainRedirect]
    - !Condition HasTrailingSlash
  UsesCleanUrlsNoSlash: !And
    - !Condition HasDefaultIndex
    - !Not [!Condition HasSubdomainRedirect]
    - !Not [!Condition HasTrailingSlash]
  UsesApexDomainCleanUrls: !And
    - !Condition HasDefaultIndex
    - !Condition HasSubdomainRedirect
    - !Condition IsApex
    - !Condition HasTrailingSlash
  UsesApexDomainCleanUrlsNoSlash: !And
    - !Condition HasDefaultIndex
    - !Condition HasSubdomainRedirect
    - !Condition IsApex
    - !Not [!Condition HasTrailingSlash]
  UsesWWWDomainCleanUrls: !And
    - !Condition HasDefaultIndex
    - !Condition HasSubdomainRedirect
    - !Condition IsWWW
    - !Condition HasTrailingSlash
  UsesWWWDomainCleanUrlsNoSlash: !And
    - !Condition HasDefaultIndex
    - !Condition HasSubdomainRedirect
    - !Condition IsWWW
    - !Not [!Condition HasTrailingSlash]
  NeedsCustomFunction: !Not
    - !Or
      - !Condition UsesCleanUrls
      - !Condition UsesCleanUrlsNoSlash
      - !Condition UsesApexDomainCleanUrls
      - !Condition UsesApexDomainCleanUrlsNoSlash
      - !Condition UsesWWWDomainCleanUrls
      - !Condition UsesWWWDomainCleanUrlsNoSlash

Resources:
  RedirectFunction:
    Type: AWS::CloudFront::Function
    Condition: NeedsCustomFunction
    Properties:
      Name: !Sub
        - 'UrlRedirects_${Id}'
        - Id: !Select [2, !Split ['/', !Ref AWS::StackId]]
      AutoPublish: true
      FunctionConfig:
        Comment: !Sub 'URI redirection for ${AWS::StackName}'
        Runtime: cloudfront-js-1.0
      FunctionCode: !Sub
        - |-
          var primarySubdomain = '${Subdomain}';
          var indexDocument = '${IndexDocument}';

          ${FunctionTemplate}
        - FunctionTemplate: !If
          - HasSubdomainRedirect
          - !If
            - IsApex
            - !If
              - HasTrailingSlash
              - !FindInMap [Functions, ApexDomain, Template]
              - !FindInMap [Functions, ApexDomainNoSlash, Template]
            - !If
              - HasTrailingSlash
              - !FindInMap [Functions, Subdomain, Template]
              - !FindInMap [Functions, SubdomainNoSlash, Template]
          - !If
            - HasTrailingSlash
            - !FindInMap [Functions, Relative, Template]
            - !FindInMap [Functions, RelativeNoSlash, Template]

Outputs:
  FunctionArn:
    Description: Arn for the function handling subdomain and uri redirects.
    Value: !If
      - NeedsCustomFunction
      - !GetAtt RedirectFunction.FunctionMetadata.FunctionARN
      - !If
        - UsesCleanUrls
        - Fn::ImportValue: !Sub '${UrlRedirectsStackName}-CleanUrls'
        - !If
          - UsesCleanUrlsNoSlash
          - Fn::ImportValue: !Sub '${UrlRedirectsStackName}-CleanUrlsNoSlash'
          - !If
            - UsesApexDomainCleanUrls
            - Fn::ImportValue: !Sub '${UrlRedirectsStackName}-ApexDomainCleanUrls'
            - !If
              - UsesApexDomainCleanUrlsNoSlash
              - Fn::ImportValue: !Sub '${UrlRedirectsStackName}-ApexDomainCleanUrlsNoSlash'
              - !If
                - UsesWWWDomainCleanUrls
                - Fn::ImportValue: !Sub '${UrlRedirectsStackName}-WWWDomainCleanUrls'
                - !If
                  - UsesWWWDomainCleanUrlsNoSlash
                  - Fn::ImportValue: !Sub '${UrlRedirectsStackName}-WWWDomainCleanUrlsNoSlash'
                  - !Ref AWS::NoValue

Mappings:
  Functions: # copied from https://github.com/dawaltconley/cloudfront-redirects/tree/v1.0.1
    Relative: 
      Template: |-
        function redirect(uri) {
            return {
                statusCode: 301,
                statusDescription: 'Moved Permanently',
                headers: { location: { value: uri } },
            };
        }

        function handler(event) {
            var request = event.request;
            var uri = request.uri || '/';

            if (uri.endsWith('/')) {
                // add index document and return properly-formatted requests
                request.uri = uri + indexDocument;
                return request;
            }

            if (uri.endsWith('/' + indexDocument)) {
                // trim index document
                return redirect(uri.slice(0, -indexDocument.length));
            }

            if (!request.uri.includes('.')) {
                // add trailing slash
                return redirect(uri + '/');
            }

            return request;
        }
    RelativeNoSlash:
      Template: |-
        function redirect(uri) {
            return {
                statusCode: 301,
                statusDescription: 'Moved Permanently',
                headers: { location: { value: uri } },
            };
        }

        function handler(event) {
            var request = event.request;
            var uri = request.uri;

            if (uri.endsWith('/')) {
                // trim trailing slash
                uri = uri.slice(0, -1);
            } else if (uri.endsWith('/' + indexDocument)) {
                // trim index document
                uri = uri.slice(0, -indexDocument.length - 1);
                if (!uri) uri = '/';
            }

            if (uri && uri !== request.uri) {
                return redirect(uri);
            }

            if (!request.uri.includes('.')) {
                // add index document and return properly-formatted requests
                request.uri = `${uri}/${indexDocument}`;
            }
            return request;
        }
    ApexDomain:
      Template: |-
        function redirect(uri) {
            return {
                statusCode: 301,
                statusDescription: 'Moved Permanently',
                headers: { location: { value: uri } },
            };
        }

        function handler(event) {
            var request = event.request;
            var uri = request.uri || '/';
            var host = request.headers.host.value;
            var subdomains = host.split('.');

            if (subdomains.length > 2) {
                // redirect to apex domain
                var apex = subdomains.slice(-2).join('.');
                uri = 'https://' + apex + uri;
                if (uri.endsWith('/')) {
                    return redirect(uri);
                }
            }

            if (uri.endsWith('/')) {
                // add index document and return properly-formatted requests
                request.uri = uri + indexDocument;
                return request;
            } else if (uri.endsWith('/' + indexDocument)) {
                // trim index document
                uri = uri.slice(0, -indexDocument.length);
            } else if (!request.uri.includes('.')) {
                // add trailing slash
                uri += '/';
            }

            if (uri !== request.uri) {
                // redirect if uri has changed
                return redirect(uri);
            }

            return request;
        }
    ApexDomainNoSlash:
      Template: |-
        function handler(event) {
            var request = event.request;
            var uri = request.uri;
            var host = request.headers.host.value;
            var subdomains = host.split('.');

            if (subdomains.length > 2) {
                // redirect to primary subdomain
                var apex = subdomains.slice(-2).join('.');
                uri = 'https://' + apex + uri;
            }

            if (uri.endsWith('/')) {
                // trim trailing slash
                uri = uri.slice(0, -1);
            } else if (uri.endsWith('/' + indexDocument)) {
                // trim index document
                uri = uri.slice(0, -indexDocument.length - 1);
                if (!uri) uri = '/';
            }

            if (uri && uri !== request.uri) {
                // redirect if uri has changed
                return {
                    statusCode: 301,
                    statusDescription: 'Moved Permanently',
                    headers: { location: { value: uri } },
                };
            }

            if (!request.uri.includes('.')) {
                // add trailing slash
                request.uri = `${uri}/${indexDocument}`;
            }
            return request;
        }
    Subdomain:
      Template: |-
        function redirect(uri) {
            return {
                statusCode: 301,
                statusDescription: 'Moved Permanently',
                headers: { location: { value: uri } },
            };
        }

        function handler(event) {
            var request = event.request;
            var uri = request.uri || '/';
            var host = request.headers.host.value;
            var subdomains = host.split('.');

            if (subdomains[subdomains.length - 3] !== primarySubdomain) {
                // redirect to primary subdomain
                var apex = subdomains.slice(-2).join('.');
                uri = `https://${primarySubdomain}.${apex + uri}`;
                if (uri.endsWith('/')) {
                    return redirect(uri);
                }
            }

            if (uri.endsWith('/')) {
                // add index document and return properly-formatted requests
                request.uri = uri + indexDocument;
                return request;
            } else if (uri.endsWith('/' + indexDocument)) {
                // trim index document
                uri = uri.slice(0, -indexDocument.length);
            } else if (!request.uri.includes('.')) {
                // add trailing slash
                uri += '/';
            }

            if (uri !== request.uri) {
                // redirect if uri has changed
                return redirect(uri);
            }

            return request;
        }
    SubdomainNoSlash:
      Template: |-
        function handler(event) {
            var request = event.request;
            var uri = request.uri;
            var host = request.headers.host.value;
            var subdomains = host.split('.');

            if (subdomains[subdomains.length - 3] !== primarySubdomain) {
                // redirect to primary subdomain
                var apex = subdomains.slice(-2).join('.');
                uri = `https://${primarySubdomain}.${apex + uri}`;
            }

            if (uri.endsWith('/')) {
                // trim trailing slash
                uri = uri.slice(0, -1);
            } else if (uri.endsWith('/' + indexDocument)) {
                // trim index document
                uri = uri.slice(0, -indexDocument.length - 1);
                if (!uri) uri = '/';
            }

            if (uri && uri !== request.uri) {
                // redirect if uri has changed
                return {
                    statusCode: 301,
                    statusDescription: 'Moved Permanently',
                    headers: { location: { value: uri } },
                };
            }

            if (!request.uri.includes('.')) {
                // add trailing slash
                request.uri = `${uri}/${indexDocument}`;
            }
            return request;
        }
