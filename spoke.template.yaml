# use some kind of map to ensure different availability zones

Parameters:
  DBPassword:
    Type: String
    Description: >-
      A password to secure access to the Spoke database.
    AllowedPattern: '[^/"@]+'
    ConstraintDescription: 'can include any printable ASCII character except "/", """, or "@".'
    MinLength: 8
    MaxLength: 128
  DBInstanceClass:
    Type: String
    Description: >-
      The instance class of the Spoke database.
    Default: db.m5.large
    AllowedValues:
      - db.m5.24xlarge
      - db.m5.12xlarge
      - db.m5.4xlarge
      - db.m5.2xlarge
      - db.m5.xlarge
      - db.m5.large
      - db.m4.16xlarge
      - db.m4.10xlarge
      - db.m4.4xlarge
      - db.m4.2xlarge
      - db.m4.xlarge
      - db.m4.large
      - db.m3.2xlarge
      - db.m3.xlarge
      - db.m3.large
      - db.m3.medium
      - db.m1.xlarge
      - db.m1.large
      - db.m1.medium
      - db.m1.small
      - db.z1d.12xlarge
      - db.z1d.6xlarge
      - db.z1d.3xlarge
      - db.z1d.2xlarge
      - db.z1d.xlarge
      - db.z1d.large
      - db.x1e.32xlarge
      - db.x1e.16xlarge
      - db.x1e.8xlarge
      - db.x1e.4xlarge
      - db.x1e.2xlarge
      - db.x1e.xlarge
      - db.x1.32xlarge
      - db.x1.16xlarge
      - db.r5.24xlarge
      - db.r5.12xlarge
      - db.r5.4xlarge
      - db.r5.2xlarge
      - db.r5.xlarge
      - db.r5.largedb.r4.16xlarge
      - db.r4.8xlarge
      - db.r4.4xlarge
      - db.r4.2xlarge
      - db.r4.xlarge
      - db.r4.large
      - db.r3.8xlarge
      - db.r3.4xlarge
      - db.r3.2xlarge
      - db.r3.xlarge
      - db.r3.large
      - db.m2.4xlarge
      - db.m2.2xlarge
      - db.m2.xlarge
      - db.t3.2xlarge
      - db.t3.xlarge
      - db.t3.large
      - db.t3.medium
      - db.t3.small
      - db.t3.micro
      - db.t2.large
      - db.t2.medium
      - db.t2.small
      - db.t2.micro

Resources:
  SpokeBucket:
    Type: AWS::S3::Bucket

  SpokeVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SpokeVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SpokeVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SpokeVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SpokeVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]

  EIPAddress:
    Type: AWS::EC2::EIP
    DependsOn: SpokeVPC # or PublicSubnetA?
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref SpokeVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SpokeVPC
      Tags:
        - Key: Name
          Value: Spoke - Public
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SpokeVPC
      Tags:
        - Key: Name
          Value: Spoke - Private
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SpokeVPC
      GroupName: Spoke - Lambda # make variable
      GroupDescription: Security group for Lambda function access
      # SecurityGroupIngress:
      #   - IpProtocol: tcp
      #     FromPort: 80
      #     ToPort: 80
      #     SourceSecurityGroupId: !GetAtt SpokeVPC.DefaultSecurityGroup
      #     Description: Web traffic
      #   - IpProtocol: tcp
      #     FromPort: 443
      #     ToPort: 443
      #     SourceSecurityGroupId: !GetAtt SpokeVPC.DefaultSecurityGroup
      #     Description: Encrypted web traffic
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
          Description: Allow all DB access
  HttpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref SecurityGroup
        Description: Web traffic
  HttpsIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref SecurityGroup
        Description: Encrypted web traffic

  RDSGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      - DBSubnetGroupDescription: Subnet group for spoke campaigns
        SubnetIds:
          - !Ref PublicSubnetA
          - !Ref PublicSubnetB
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: !Ref DBInstanceClass
      Engine: postgres
      EngineVersion: '10.4'
      DBName: spoke_prod # make variable
      MasterUsername: spoke
      MasterUserPassword: !Ref DBPassword
      # DBSubnetGroupName: # maybe needed
      # VPCSecurityGroups: # maybe needed

  SpokeAPI:
    Type: AWS::Serverless::Api # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-api.html
    Properties:
