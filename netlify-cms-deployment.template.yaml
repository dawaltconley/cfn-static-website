AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Deployment stage for a website using Netlify CMS.

Parameters:
  DomainStack:
    Type: String
    Description: Name of the stack that exports domain and certificate information.
  ApiSubdomain:
    Type: String
    Default: api
  ApiBasePath:
    Type: String
    Default: admin

  # Stack Variables
  ClientAuth:
    Type: 'AWS::SSM::Parameter::Value<List<String>>'
    Description: >-
      A SSM StringList Parameter, where the first parameter corresponds to the Client ID
      and the second to the Client Secret used for authorizing with GitHub.
    NoEcho: true
  GitHostname:
    Type: String
    Default: https://github.com
  OAuthProvider:
    Type: String
    Default: github
  OAuthScopes:
    Type: String
    Default: user,repo
  OAuthAuthorizePath:
    Type: String
    Default: /login/oauth/authorize
  OAuthTokenPath:
    Type: String
    Default: /login/oauth/access_token

  # Netlify stack config
  NetlifyStackName:
    Type: String
    Description: Name of the stack exporting a Rest API ID for a self-hosted Netlify CMS.
    Default: NetlifyCMSAuth

Resources:
  Deployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub '${NetlifyStackName}-RestApiId'
      StageName: !Ref AWS::StackName
      StageDescription:
        ThrottlingRateLimit: 100
        ThrottlingBurstLimit: 50
        LoggingLevel: ERROR
        Variables:
          CLIENT_ID: !Select [0, !Ref ClientAuth]
          CLIENT_SECRET: !Select [1, !Ref ClientAuth]
          DOMAIN: !Sub
            - 'https://${Domain}'
            - Domain:
                Fn::ImportValue: !Sub '${DomainStack}-FullDomain'
          GIT_HOSTNAME: !Ref GitHostname
          OAUTH_AUTHORIZE_PATH: !Ref OAuthAuthorizePath
          OAUTH_PROVIDER: !Ref OAuthProvider
          OAUTH_SCOPES: !Ref OAuthScopes
          OAUTH_TOKEN_PATH: !Ref OAuthTokenPath
  DomainName: # TODO conditionally create if none provided
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn:
        Fn::ImportValue: !Sub '${DomainStack}-CertificateArn'
      DomainName: !Sub
        - '${ApiSubdomain}.${Domain}'
        - Domain:
            Fn::ImportValue: !Sub '${DomainStack}-Domain'
      EndpointConfiguration:
        Types:
          - EDGE
      SecurityPolicy: TLS_1_2
  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub '${NetlifyStackName}-RestApiId'
      DomainName: !Ref DomainName
      Stage: !Ref AWS::StackName
      BasePath: !Ref ApiBasePath
  # could also keep this in the parent group, point record sets to the outputs of other stacks.
  RecordSetGroup: # TODO conditionally create if none provided?
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub
        - '${Domain}.'
        - Domain:
            Fn::ImportValue: !Sub '${DomainStack}-Domain'
      RecordSets:
        - Name: !Sub
            - '${ApiSubdomain}.${Domain}'
            - Domain:
                Fn::ImportValue: !Sub '${DomainStack}-Domain'
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt DomainName.DistributionHostedZoneId
            DNSName: !GetAtt DomainName.DistributionDomainName

Outputs:
  DeploymentId:
    Value: !Ref Deployment # only value exported from api deployment
  DeploymentPath:
    Value: !Ref ApiBasePath
  DeploymentStageName:
    Value: !Ref AWS::StackName
  ApiDomainName:
    Value: !Ref DomainName
  DistributionHostedZone:
    Value: !GetAtt DomainName.DistributionHostedZoneId
  DistributionDomainName:
    Value: !GetAtt DomainName.DistributionDomainName
